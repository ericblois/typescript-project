{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ericblois/Development/React Native/typescript-project/app/UserSignupScreen.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CustomerInfoPage, AccountTypePage } from \"./HelperFiles/PageIndex\";\nimport { defaults, icons, styleValues } from \"./HelperFiles/StyleSheet\";\nimport { UserSignupStack } from \"./HelperFiles/Navigation\";\nimport MenuBar from \"./CustomComponents/MenuBar\";\nimport { initialWindowMetrics } from \"react-native-safe-area-context\";\nimport ServerData from \"./HelperFiles/ServerData\";\n\nvar UserSignupScreen = function (_Component) {\n  _inherits(UserSignupScreen, _Component);\n\n  var _super = _createSuper(UserSignupScreen);\n\n  function UserSignupScreen() {\n    var _this;\n\n    _classCallCheck(this, UserSignupScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      enterEnabled: false\n    };\n    _this.infoPage = null;\n    _this.accountType = undefined;\n    _this.email = undefined;\n    _this.password = undefined;\n    _this.userData = undefined;\n    return _this;\n  }\n\n  _createClass(UserSignupScreen, [{\n    key: \"toggleEnter\",\n    value: function toggleEnter(routeName) {\n      var enabled = routeName == \"accountType\" && this.accountType != undefined || routeName == \"customerInfo\" && this.email != undefined && this.password != undefined && this.userData != undefined;\n      this.setState({\n        enterEnabled: enabled\n      });\n    }\n  }, {\n    key: \"nextPage\",\n    value: function nextPage(navigation, route) {\n      var _this2 = this;\n\n      if (route.name == \"accountType\" && this.accountType) {\n        navigation.navigate(\"customerInfo\");\n      } else if (route.name == \"customerInfo\") {\n        if (this.infoPage) {\n          this.infoPage.sendBackValues();\n        }\n\n        if (this.accountType != undefined && this.email != undefined && this.password != undefined && this.userData != undefined) {\n          var navKey = this.accountType.concat(\"Main\");\n          ServerData.createNewUser(this.email, this.password, this.userData).then(function () {\n            return _this2.props.navigation.navigate(navKey);\n          }, function (e) {\n            throw e;\n          });\n        } else {\n          console.error(\"A required value for account sign up is missing.\");\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(View, {\n        style: defaults.screenContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, React.createElement(UserSignupStack.Navigator, {\n        initialRouteName: \"accountType\",\n        screenOptions: {\n          title: \"Sign Up\",\n          headerStatusBarHeight: 0,\n          header: function header(props) {\n            return React.createElement(MenuBar, {\n              buttonProps: [{\n                iconSource: icons.backArrow,\n                buttonFunc: props.navigation.goBack\n              }, {\n                iconSource: icons.enter,\n                iconStyle: {\n                  tintColor: _this3.state.enterEnabled ? styleValues.darkGreyColor : styleValues.lightGreyColor\n                },\n                buttonFunc: function buttonFunc() {\n                  return _this3.nextPage(props.navigation, props.scene.route);\n                },\n                buttonProps: {\n                  activeOpacity: _this3.state.enterEnabled ? 0.2 : 1\n                }\n              }],\n              menuBarStyle: styles.headerBar,\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 29\n              }\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, React.createElement(UserSignupStack.Screen, {\n        name: \"accountType\",\n        children: function children(props) {\n          return React.createElement(AccountTypePage, _extends({}, props, {\n            selectCallback: function selectCallback(accountType) {\n              _this3.accountType = accountType;\n\n              _this3.toggleEnter(props.route.name);\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 46\n            }\n          }));\n        },\n        listeners: {\n          focus: function focus(event) {\n            if (event.target) {\n              var name = event.target.substring(0, event.target.indexOf(\"-\"));\n\n              _this3.toggleEnter(name);\n            }\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }), React.createElement(UserSignupStack.Screen, {\n        name: \"customerInfo\",\n        children: function children(props) {\n          return React.createElement(CustomerInfoPage, _extends({\n            ref: function ref(infoPage) {\n              return _this3.infoPage = infoPage;\n            }\n          }, props, {\n            infoUpdateCallback: function infoUpdateCallback(email, password, userData) {\n              _this3.email = email;\n              _this3.password = password;\n              _this3.userData = userData;\n\n              _this3.toggleEnter(props.route.name);\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 46\n            }\n          }));\n        },\n        listeners: {\n          focus: function focus(event) {\n            if (event.target) {\n              var name = event.target.substring(0, event.target.indexOf(\"-\"));\n\n              _this3.toggleEnter(name);\n            }\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return UserSignupScreen;\n}(Component);\n\nexport { UserSignupScreen as default };\nvar headerBarTop = styleValues.winHeight - (initialWindowMetrics != null && initialWindowMetrics.insets.top ? initialWindowMetrics.insets.top : 0) - (initialWindowMetrics != null && initialWindowMetrics.insets.bottom ? initialWindowMetrics.insets.bottom : 0) - styleValues.winWidth * 0.15 - styleValues.mediumPadding;\nvar styles = StyleSheet.create({\n  headerBar: {\n    bottom: undefined,\n    top: headerBarTop\n  }\n});","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/UserSignupScreen.tsx"],"names":["React","Component","CustomerInfoPage","AccountTypePage","defaults","icons","styleValues","UserSignupStack","MenuBar","initialWindowMetrics","ServerData","UserSignupScreen","state","enterEnabled","infoPage","accountType","undefined","email","password","userData","routeName","enabled","setState","navigation","route","name","navigate","sendBackValues","navKey","concat","createNewUser","then","props","e","console","error","screenContainer","title","headerStatusBarHeight","header","iconSource","backArrow","buttonFunc","goBack","enter","iconStyle","tintColor","darkGreyColor","lightGreyColor","nextPage","scene","buttonProps","activeOpacity","styles","headerBar","toggleEnter","focus","event","target","substring","indexOf","headerBarTop","winHeight","insets","top","bottom","winWidth","mediumPadding","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { StyleSheet, StatusBar, AppState, ActivityIndicator, View, Text } from \"react-native\";\nimport { CustomerInfoPage, AccountTypePage } from \"./HelperFiles/PageIndex\";\nimport { defaults, icons, styleValues } from \"./HelperFiles/StyleSheet\";\nimport { NavigationContainer, ParamListBase, Route } from \"@react-navigation/native\";\nimport { RootStack, CustomerMainTab, RootStackParamList } from \"./HelperFiles/Navigation\";\nimport { UserSignupStack, UserSignupStackParamList } from \"./HelperFiles/Navigation\";\nimport { StackHeaderProps, StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport MenuBar from \"./CustomComponents/MenuBar\";\nimport { initialWindowMetrics } from \"react-native-safe-area-context\";\nimport { UserData } from \"./HelperFiles/DataTypes\";\nimport IconButton from \"./CustomComponents/IconButton\";\nimport ServerData from \"./HelperFiles/ServerData\";\n\ntype UserSignupNavigationProp = StackNavigationProp<RootStackParamList, \"userSignup\">;\n\ntype UserSignupRouteProp = RouteProp<RootStackParamList, \"userSignup\">;\n\ntype Props = {\n    navigation: UserSignupNavigationProp,\n    route: UserSignupRouteProp\n}\n\ntype State = {\n    enterEnabled: boolean\n}\n\nexport default class UserSignupScreen extends Component<Props, State> {\n\n    state: Readonly<State> = {\n        enterEnabled: false\n    }\n    // Reference to child customer info page to call its functions\n    infoPage: CustomerInfoPage | null = null\n\n    accountType?: string = undefined\n    email?: string = undefined\n    password?: string = undefined\n    userData?: UserData = undefined\n\n    toggleEnter(routeName: string) {\n        const enabled = (\n            (routeName == \"accountType\" && this.accountType != undefined)\n            || (routeName == \"customerInfo\" && this.email != undefined && this.password != undefined && this.userData != undefined)\n        )\n        this.setState({enterEnabled: enabled})\n    }\n\n    nextPage(navigation: StackNavigationProp<ParamListBase, string>, route: Route<string, object | undefined>) {\n        if (route.name == \"accountType\" && this.accountType) {\n            navigation.navigate(\"customerInfo\")\n        } else if (route.name == \"customerInfo\") {\n            if (this.infoPage) {\n                this.infoPage!.sendBackValues()\n            }\n            if (this.accountType != undefined && this.email != undefined && this.password != undefined && this.userData != undefined) {\n                const navKey = this.accountType!.concat(\"Main\")\n                ServerData.createNewUser(this.email, this.password, this.userData).then(() => this.props.navigation.navigate(navKey as keyof RootStackParamList), (e) => {throw e})\n            } else {\n                console.error(\"A required value for account sign up is missing.\")\n            }\n        }\n    }\n\n    render() {\n        return (\n            <View style={defaults.screenContainer}>\n                <UserSignupStack.Navigator\n                    initialRouteName={\"accountType\"}\n                    screenOptions={{\n                        title: \"Sign Up\",\n                        headerStatusBarHeight: 0,\n                        header: (props) => (\n                            <MenuBar\n                                buttonProps={[\n                                    {\n                                        iconSource: icons.backArrow,\n                                        buttonFunc: props.navigation.goBack,\n                                    },\n                                    {\n                                        iconSource: icons.enter,\n                                        iconStyle: {tintColor: this.state.enterEnabled ? styleValues.darkGreyColor : styleValues.lightGreyColor},\n                                        buttonFunc: () => this.nextPage(props.navigation, props.scene.route),\n                                        buttonProps: {\n                                            activeOpacity: this.state.enterEnabled ? 0.2 : 1,\n                                        }\n                                    }\n                                ]}\n                                menuBarStyle={styles.headerBar}\n                            />\n                        )\n                    }}\n                >\n                    <UserSignupStack.Screen\n                        name={\"accountType\"}\n                        children={(props) => <AccountTypePage {...props} selectCallback={(accountType: string) => {\n                            this.accountType = accountType\n                            this.toggleEnter(props.route.name)\n                        }}/>}\n                        listeners={{\n                            focus: (event) => {\n                                // Reset the enter button\n                                if (event.target) {\n                                    let name = event.target!.substring(0, event.target.indexOf(\"-\"))\n                                    this.toggleEnter(name)\n                                }\n                            }\n                        }}\n                    />\n                    <UserSignupStack.Screen\n                        name={\"customerInfo\"}\n                        children={(props) => <CustomerInfoPage ref={infoPage => this.infoPage = infoPage} {...props}\n                            infoUpdateCallback={(email?: string, password?: string, userData?: UserData) => {\n                                this.email = email\n                                this.password = password\n                                this.userData = userData\n                                this.toggleEnter(props.route.name)\n                            }}\n                        />}\n                        listeners={{\n                            focus: (event) => {\n                                // Reset the enter button\n                                if (event.target) {\n                                    let name = event.target!.substring(0, event.target.indexOf(\"-\"))\n                                    this.toggleEnter(name)\n                                }\n                            }\n                        }}\n                    />\n                </UserSignupStack.Navigator>\n            </View>\n        )\n    }\n\n\n}\n\nconst headerBarTop = styleValues.winHeight\n    - (initialWindowMetrics?.insets.top ? initialWindowMetrics!.insets.top : 0)\n    - (initialWindowMetrics?.insets.bottom ? initialWindowMetrics!.insets.bottom : 0)\n    - styleValues.winWidth * 0.15\n    - styleValues.mediumPadding\n\nconst styles = StyleSheet.create({\n    headerBar: {\n        bottom: undefined,\n        top: headerBarTop,\n    }\n})"]},"metadata":{},"sourceType":"module"}