{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ericblois/Development/React Native/typescript-project/app/SignupPages/UserSignupLocationPage.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { styleValues, defaults } from \"../HelperFiles/StyleSheet\";\nimport PropTypes from 'prop-types';\nimport { googleAPIKey, regionCodes } from \"../HelperFiles/Constants\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\n\nvar UserSignupLocationPage = function (_Component) {\n  _inherits(UserSignupLocationPage, _Component);\n\n  var _super = _createSuper(UserSignupLocationPage);\n\n  function UserSignupLocationPage(props) {\n    var _this;\n\n    _classCallCheck(this, UserSignupLocationPage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      validLocation: false,\n      lastInvalid: \"\",\n      hideMenuBar: false,\n      currentPosition: null\n    };\n    styleValues.validColor = \"#5ed692\";\n    styleValues.invalidColor = \"#e34f4f\";\n    _this.businessData = {\n      city: \"\",\n      region: \"\",\n      country: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(UserSignupLocationPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.setState({\n          currentPosition: {\n            lat: position.coords.latitude,\n            long: position.coords.longitude\n          }\n        });\n      });\n    }\n  }, {\n    key: \"saveLocationTerms\",\n    value: function saveLocationTerms(terms) {\n      switch (terms.length) {\n        case 2:\n          this.businessData.info.city = terms[0][\"value\"];\n          this.businessData.info.country = terms[1][\"value\"];\n          break;\n\n        case 3:\n          this.businessData.info.city = terms[0][\"value\"];\n          this.businessData.info.region = regionCodes.hasOwnProperty(terms[1][\"value\"]) ? regionCodes[terms[1][\"value\"]] : terms[1][\"value\"];\n          this.businessData.info.country = terms[2][\"value\"];\n          break;\n\n        case 4:\n          this.businessData.info.city = terms[0][\"value\"];\n          this.businessData.info.region = regionCodes.hasOwnProperty(terms[1][\"value\"]) ? regionCodes[terms[1][\"value\"]] : terms[1][\"value\"];\n          this.businessData.info.country = terms[3][\"value\"];\n          break;\n\n        default:\n          this.businessData.info.city = terms[0][\"value\"];\n          this.businessData.info.region = regionCodes.hasOwnProperty(terms[1][\"value\"]) ? regionCodes[terms[1][\"value\"]] : terms[1][\"value\"];\n          this.businessData.info.country = terms[2][\"value\"];\n          break;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.currentPosition != null) {\n        return React.createElement(SafeAreaView, {\n          style: defaults.screenContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: defaults.pageContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: styles.signupHeader,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }\n        }, \"Sign Up\"), React.createElement(GooglePlacesAutocomplete, {\n          styles: {\n            textInputContainer: styles.inputContainer,\n            textInput: [styles.inputElement, {\n              borderColor: this.state.validLocation ? styleValues.validColor : styleValues.invalidColor\n            }]\n          },\n          placeholder: \"Location\",\n          query: {\n            key: googleAPIKey,\n            language: \"en\",\n            types: \"(cities)\",\n            location: this.state.currentPosition.lat.toString() + \", \" + this.state.currentPosition.long.toString()\n          },\n          onPress: function onPress(data, detail) {\n            _this3.saveLocationTerms(data.terms);\n\n            _this3.setState({\n              validLocation: true\n            });\n\n            if (_this3.state.lastInvalid == \"location\") {\n              _this3.setState({\n                responseText: \"\"\n              });\n            }\n          },\n          textInputProps: {\n            onChangeText: function onChangeText() {\n              _this3.setState({\n                validLocation: false\n              });\n\n              if (_this3.state.lastInvalid == \"location\") {\n                _this3.setState({\n                  responseText: \"Please select a location from the dropdown.\"\n                });\n              }\n            }\n          },\n          currentLocation: false,\n          enableHighAccuracyLocation: false,\n          enablePoweredByContainer: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }\n        })));\n      } else {\n        return React.createElement(ActivityIndicator, {\n          style: styles.loadingScreen,\n          size: \"large\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 16\n          }\n        });\n      }\n    }\n  }]);\n\n  return UserSignupLocationPage;\n}(Component);\n\nUserSignupLocationPage.propTypes = {\n  navigation: PropTypes.object,\n  route: PropTypes.object\n};\nexport { UserSignupLocationPage as default };\nvar styles = StyleSheet.create({\n  loadingScreen: {\n    position: \"absolute\",\n    top: 0,\n    backgroundColor: \"#fff\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  signupHeader: {\n    fontSize: styleValues.largestTextSize,\n    margin: styleValues.mediumPadding\n  },\n  inputContainer: {\n    width: styleValues.winWidth - 2 * styleValues.mediumPadding,\n    height: styleValues.winWidth / 10\n  },\n  inputElement: {\n    width: styleValues.winWidth - 2 * styleValues.mediumPadding,\n    height: styleValues.winWidth / 10,\n    fontSize: styleValues.smallestTextSize,\n    backgroundColor: \"#fff\",\n    borderWidth: 2,\n    borderRadius: styleValues.mediumPadding,\n    marginBottom: styleValues.mediumPadding\n  },\n  inputDescription: {\n    width: styleValues.winWidth - 2 * styleValues.mediumPadding,\n    textAlign: \"left\",\n    fontSize: styleValues.smallestTextSize,\n    padding: styleValues.mediumPadding\n  }\n});","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/SignupPages/UserSignupLocationPage.tsx"],"names":["React","Component","styleValues","defaults","PropTypes","googleAPIKey","regionCodes","GooglePlacesAutocomplete","UserSignupLocationPage","props","state","validLocation","lastInvalid","hideMenuBar","currentPosition","validColor","invalidColor","businessData","city","region","country","navigator","geolocation","getCurrentPosition","position","setState","lat","coords","latitude","long","longitude","terms","length","info","hasOwnProperty","screenContainer","pageContainer","styles","signupHeader","textInputContainer","inputContainer","textInput","inputElement","borderColor","key","language","types","location","toString","data","detail","saveLocationTerms","responseText","onChangeText","loadingScreen","propTypes","navigation","object","route","StyleSheet","create","top","backgroundColor","width","height","fontSize","largestTextSize","margin","mediumPadding","winWidth","smallestTextSize","borderWidth","borderRadius","marginBottom","inputDescription","textAlign","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View, TouchableOpacity, Image, Text, StyleSheet, ActivityIndicator, SafeAreaView } from \"react-native\";\n\nimport { styleValues, defaults } from \"../HelperFiles/StyleSheet\";\nimport { IconButton, MenuBar } from \"../HelperFiles/CompIndex\";\nimport PropTypes from 'prop-types';\nimport { auth, businessPropType, googleAPIKey, regionCodes } from \"../HelperFiles/Constants\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nexport default class UserSignupLocationPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            validLocation: false,\n            lastInvalid: \"\",\n            hideMenuBar: false,\n            currentPosition: null,\n        }\n        styleValues.validColor = \"#5ed692\";\n        styleValues.invalidColor = \"#e34f4f\";\n        this.businessData = {\n            city: \"\",\n            region: \"\",\n            country: \"\"\n        }\n    }\n\n  static propTypes = {\n    navigation: PropTypes.object,\n    route: PropTypes.object,\n  }\n\n  componentDidMount() {\n        // Get current location\n        navigator.geolocation.getCurrentPosition((position) => {\n            this.setState({currentPosition: {\n                lat: position.coords.latitude,\n                long: position.coords.longitude\n            }});\n        });\n  }\n\n  saveLocationTerms(terms) {\n      switch (terms.length) {\n            case 2:\n                this.businessData.info.city = terms[0][\"value\"];\n                this.businessData.info.country = terms[1][\"value\"];\n                break;\n            case 3:\n                this.businessData.info.city = terms[0][\"value\"];\n                this.businessData.info.region = regionCodes.hasOwnProperty(terms[1][\"value\"]) ? regionCodes[terms[1][\"value\"]] : terms[1][\"value\"];\n                this.businessData.info.country = terms[2][\"value\"];\n                break;\n            case 4:\n                this.businessData.info.city = terms[0][\"value\"];\n                this.businessData.info.region = regionCodes.hasOwnProperty(terms[1][\"value\"]) ? regionCodes[terms[1][\"value\"]] : terms[1][\"value\"];\n                this.businessData.info.country = terms[3][\"value\"];\n                break;\n            default:\n                this.businessData.info.city = terms[0][\"value\"];\n                this.businessData.info.region = regionCodes.hasOwnProperty(terms[1][\"value\"]) ? regionCodes[terms[1][\"value\"]] : terms[1][\"value\"];\n                this.businessData.info.country = terms[2][\"value\"];\n                break;\n      }\n  }\n\n  render() {\n    if (this.state.currentPosition != null) {\n        return (\n        <SafeAreaView style={defaults.screenContainer}>\n            <View style={defaults.pageContainer}>\n            <Text style={styles.signupHeader}>\n                Sign Up\n            </Text>\n            <GooglePlacesAutocomplete\n                styles={{\n                    textInputContainer: styles.inputContainer,\n                    textInput: [styles.inputElement, {borderColor: this.state.validLocation ? styleValues.validColor : styleValues.invalidColor}]\n                }}\n                placeholder=\"Location\"\n                query={{\n                    key: googleAPIKey,\n                    language: \"en\",\n                    types: \"(cities)\",\n                    location: this.state.currentPosition.lat.toString() + \", \" + this.state.currentPosition.long.toString()\n                }}\n                onPress={(data, detail) => {\n                    this.saveLocationTerms(data.terms);\n                    this.setState({validLocation: true})\n                    if (this.state.lastInvalid == \"location\") {\n                        this.setState({responseText: \"\"});\n                    }\n                }}\n                textInputProps={{\n                    onChangeText: () => {\n                        this.setState({validLocation: false})\n                        if (this.state.lastInvalid == \"location\") {\n                            this.setState({responseText: \"Please select a location from the dropdown.\"});\n                        }\n                    }\n                }}\n                currentLocation={false}\n                enableHighAccuracyLocation={false}\n                enablePoweredByContainer={false}\n            />\n            </View>\n        </SafeAreaView>\n        );\n    } else {\n        return <ActivityIndicator style={styles.loadingScreen} size={\"large\"}/>\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n    loadingScreen: {\n        position: \"absolute\",\n        top: 0,\n        backgroundColor: \"#fff\",\n        width: \"100%\",\n        height: \"100%\",\n    },\n    signupHeader: {\n        fontSize: styleValues.largestTextSize,\n        margin: styleValues.mediumPadding,\n    },\n    inputContainer: {\n        width: styleValues.winWidth-2*styleValues.mediumPadding,\n        height: styleValues.winWidth/10,\n    },\n    inputElement: {\n        width: styleValues.winWidth-2*styleValues.mediumPadding,\n        height: styleValues.winWidth/10,\n        fontSize: styleValues.smallestTextSize,\n        backgroundColor: \"#fff\",\n        borderWidth: 2,\n        borderRadius: styleValues.mediumPadding,\n        marginBottom: styleValues.mediumPadding\n    },\n    inputDescription: {\n        width: styleValues.winWidth-2*styleValues.mediumPadding,\n        textAlign: \"left\",\n        fontSize: styleValues.smallestTextSize,\n        padding: styleValues.mediumPadding,\n    },\n})"]},"metadata":{},"sourceType":"module"}