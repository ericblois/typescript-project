{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ericblois/Development/React Native/typescript-project/app/SignupPages/AccountTypePage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { styleValues, defaults } from \"../HelperFiles/StyleSheet\";\nimport TextButton from \"../CustomComponents/TextButton\";\n\nvar CustomerInfoPage = function (_Component) {\n  _inherits(CustomerInfoPage, _Component);\n\n  var _super = _createSuper(CustomerInfoPage);\n\n  function CustomerInfoPage() {\n    var _this;\n\n    _classCallCheck(this, CustomerInfoPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      typeSelection: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(CustomerInfoPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: [defaults.pageContainer, {\n          justifyContent: \"center\"\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.titleText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, \"Sign Up\"), React.createElement(TextButton, {\n        text: \"Become a customer\",\n        subtext: \"Start shopping from small businesses.\",\n        buttonStyle: _objectSpread(_objectSpread(_objectSpread({}, defaults.textButtonNoColor), styles.accountTypeButton), {\n          borderWidth: this.state.typeSelection == \"customer\" ? styleValues.majorBorderWidth : styleValues.minorBorderWidth\n        }),\n        buttonFunc: function buttonFunc() {\n          if (_this2.props.selectCallback) {\n            _this2.props.selectCallback(\"customer\");\n          }\n\n          _this2.setState({\n            typeSelection: \"customer\"\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }), React.createElement(TextButton, {\n        text: \"Start a business\",\n        subtext: \"Create a business page to reach customers.\",\n        buttonStyle: _objectSpread(_objectSpread(_objectSpread({}, defaults.textButtonNoColor), styles.accountTypeButton), {\n          borderWidth: this.state.typeSelection == \"business\" ? styleValues.majorBorderWidth : styleValues.minorBorderWidth\n        }),\n        buttonFunc: function buttonFunc() {\n          if (_this2.props.selectCallback) {\n            _this2.props.selectCallback(\"business\");\n          }\n\n          _this2.setState({\n            typeSelection: \"business\"\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return CustomerInfoPage;\n}(Component);\n\nexport { CustomerInfoPage as default };\nvar styles = StyleSheet.create({\n  titleText: {\n    position: \"absolute\",\n    top: styleValues.majorPadding,\n    fontSize: styleValues.largestTextSize\n  },\n  accountTypeButton: {\n    margin: styleValues.mediumPadding,\n    width: \"60%\",\n    height: styleValues.winWidth * 0.4,\n    padding: styleValues.majorPadding\n  }\n});","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/SignupPages/AccountTypePage.tsx"],"names":["React","Component","styleValues","defaults","TextButton","CustomerInfoPage","state","typeSelection","pageContainer","justifyContent","styles","titleText","textButtonNoColor","accountTypeButton","borderWidth","majorBorderWidth","minorBorderWidth","props","selectCallback","setState","StyleSheet","create","position","top","majorPadding","fontSize","largestTextSize","margin","mediumPadding","width","height","winWidth","padding"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,WAAT,EAAsBC,QAAtB;AAUA,OAAOC,UAAP;;IAiBqBC,gB;;;;;;;;;;;;;;;UAEjBC,K,GAAyB;AACrBC,MAAAA,aAAa,EAAE;AADM,K;;;;;;6BAIhB;AAAA;;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACJ,QAAQ,CAACK,aAAV,EAAyB;AAACC,UAAAA,cAAc,EAAE;AAAjB,SAAzB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAII,oBAAC,UAAD;AACI,QAAA,IAAI,EAAE,mBADV;AAEI,QAAA,OAAO,EAAE,uCAFb;AAGI,QAAA,WAAW,gDACJR,QAAQ,CAACS,iBADL,GAEJF,MAAM,CAACG,iBAFH,GAGJ;AAACC,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWC,aAAX,IAA4B,UAA5B,GAAyCL,WAAW,CAACa,gBAArD,GAAwEb,WAAW,CAACc;AAAlG,SAHI,CAHf;AAQI,QAAA,UAAU,EAAE,sBAAM;AACd,cAAI,MAAI,CAACC,KAAL,CAAWC,cAAf,EAA+B;AAC3B,YAAA,MAAI,CAACD,KAAL,CAAWC,cAAX,CAA2B,UAA3B;AACH;;AACD,UAAA,MAAI,CAACC,QAAL,CAAc;AAACZ,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACH,SAbL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAmBI,oBAAC,UAAD;AACI,QAAA,IAAI,EAAE,kBADV;AAEI,QAAA,OAAO,EAAE,4CAFb;AAGI,QAAA,WAAW,gDACJJ,QAAQ,CAACS,iBADL,GAEJF,MAAM,CAACG,iBAFH,GAGJ;AAACC,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWC,aAAX,IAA4B,UAA5B,GAAyCL,WAAW,CAACa,gBAArD,GAAwEb,WAAW,CAACc;AAAlG,SAHI,CAHf;AAQI,QAAA,UAAU,EAAE,sBAAM;AACd,cAAI,MAAI,CAACC,KAAL,CAAWC,cAAf,EAA+B;AAC3B,YAAA,MAAI,CAACD,KAAL,CAAWC,cAAX,CAA2B,UAA3B;AACH;;AACD,UAAA,MAAI,CAACC,QAAL,CAAc;AAACZ,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACH,SAbL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBJ,CADJ;AAqCH;;;;EA5CyCN,S;;SAAzBI,gB;AA+CrB,IAAMK,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC7BV,EAAAA,SAAS,EAAE;AACPW,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,GAAG,EAAErB,WAAW,CAACsB,YAFV;AAGPC,IAAAA,QAAQ,EAAEvB,WAAW,CAACwB;AAHf,GADkB;AAM7Bb,EAAAA,iBAAiB,EAAE;AACfc,IAAAA,MAAM,EAAEzB,WAAW,CAAC0B,aADL;AAEfC,IAAAA,KAAK,EAAE,KAFQ;AAGfC,IAAAA,MAAM,EAAE5B,WAAW,CAAC6B,QAAZ,GAAqB,GAHd;AAIfC,IAAAA,OAAO,EAAE9B,WAAW,CAACsB;AAJN;AANU,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { View, ScrollView, Text, StyleSheet, TextInput, ActivityIndicator } from \"react-native\";\nimport { styleValues, defaults, icons } from \"../HelperFiles/StyleSheet\";\nimport { IconButton, MenuBar } from \"../HelperFiles/CompIndex\";\nimport { auth, googleAPIKey } from \"../HelperFiles/Constants\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { UserSignupStackParamList } from \"../HelperFiles/Navigation\";\nimport { RouteProp } from '@react-navigation/native';\nimport ServerData from \"../HelperFiles/ServerData\";\nimport { UserData } from \"../HelperFiles/DataTypes\";\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport TextButton from \"../CustomComponents/TextButton\";\n\ntype AccountTypeNavigationProp = StackNavigationProp<UserSignupStackParamList, \"accountType\">;\n\ntype AccountTypeRouteProp = RouteProp<UserSignupStackParamList, \"accountType\">;\n\ntype Props = {\n    navigation: AccountTypeNavigationProp,\n    route: AccountTypeRouteProp,\n    selectCallback?: (typeSelection: string) => void\n}\n\ntype State = {\n    typeSelection: string\n}\n\n\nexport default class CustomerInfoPage extends Component<Props, State> {\n\n    state: Readonly<State> = {\n        typeSelection: \"\"\n    }\n\n    render() {\n        return (\n            <View style={[defaults.pageContainer, {justifyContent: \"center\"}]}>\n                <Text style={styles.titleText}>\n                    Sign Up\n                </Text>\n                <TextButton\n                    text={\"Become a customer\"}\n                    subtext={\"Start shopping from small businesses.\"}\n                    buttonStyle={{\n                        ...defaults.textButtonNoColor,\n                        ...styles.accountTypeButton,\n                        ...{borderWidth: this.state.typeSelection == \"customer\" ? styleValues.majorBorderWidth : styleValues.minorBorderWidth}\n                    }}\n                    buttonFunc={() => {\n                        if (this.props.selectCallback) {\n                            this.props.selectCallback!(\"customer\")\n                        }\n                        this.setState({typeSelection: \"customer\"})\n                    }}\n                />\n                <TextButton\n                    text={\"Start a business\"}\n                    subtext={\"Create a business page to reach customers.\"}\n                    buttonStyle={{\n                        ...defaults.textButtonNoColor,\n                        ...styles.accountTypeButton,\n                        ...{borderWidth: this.state.typeSelection == \"business\" ? styleValues.majorBorderWidth : styleValues.minorBorderWidth}\n                    }}\n                    buttonFunc={() => {\n                        if (this.props.selectCallback) {\n                            this.props.selectCallback!(\"business\")\n                        }\n                        this.setState({typeSelection: \"business\"})\n                    }}\n                />\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    titleText: {\n        position: \"absolute\",\n        top: styleValues.majorPadding,\n        fontSize: styleValues.largestTextSize\n    },\n    accountTypeButton: {\n        margin: styleValues.mediumPadding,\n        width: \"60%\",\n        height: styleValues.winWidth*0.4,\n        padding: styleValues.majorPadding\n    }\n})\n"]},"metadata":{},"sourceType":"module"}