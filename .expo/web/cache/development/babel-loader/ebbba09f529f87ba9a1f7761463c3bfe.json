{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ericblois/Development/React Native/typescript-project/app/SignupPages/CustomerInfoPage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { styleValues, defaults } from \"../HelperFiles/StyleSheet\";\nimport { TextInputBox, DateScrollPicker, TextDropdown } from \"../HelperFiles/CompIndex\";\n\nvar CustomerInfoPage = function (_Component) {\n  _inherits(CustomerInfoPage, _Component);\n\n  var _super = _createSuper(CustomerInfoPage);\n\n  function CustomerInfoPage() {\n    var _this;\n\n    _classCallCheck(this, CustomerInfoPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.defaultTextProps = {\n      autoCorrect: false,\n      autoCapitalize: \"none\",\n      clearButtonMode: \"while-editing\"\n    };\n    _this.today = new Date();\n    _this.state = {\n      nameText: \"\",\n      validName: false,\n      emailText: \"\",\n      validEmail: false,\n      passText: \"\",\n      validPass: false,\n      confirmPassText: \"\",\n      validConfirm: false,\n      birthdayValue: _this.today,\n      ageValue: 0,\n      birthdayText: \"\",\n      validBirthday: false,\n      genderText: null,\n      validGender: false,\n      responseText: \"\",\n      lastInvalid: \"\"\n    };\n\n    _this.back = function () {\n      return _this.props.navigation.goBack();\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomerInfoPage, [{\n    key: \"sendBackValues\",\n    value: function sendBackValues() {\n      if (!this.state.validName) {\n        this.setState({\n          responseText: \"Please enter a name.\",\n          lastInvalid: \"name\"\n        });\n      } else if (!this.state.validEmail) {\n        this.setState({\n          responseText: \"Please enter a valid email.\",\n          lastInvalid: \"email\"\n        });\n      } else if (!this.state.validPass) {\n        this.setState({\n          responseText: \"Please enter a valid password.\",\n          lastInvalid: \"pass\"\n        });\n      } else if (!this.state.validConfirm) {\n        this.setState({\n          responseText: \"Your password does not match the confirmation.\",\n          lastInvalid: \"confirm\"\n        });\n      } else if (!this.state.validBirthday) {\n        this.setState({\n          responseText: \"You must be 13 years of age or older to use this service.\",\n          lastInvalid: \"confirm\"\n        });\n      } else if (!this.state.validGender) {\n        this.setState({\n          responseText: \"Please select your gender.\",\n          lastInvalid: \"confirm\"\n        });\n      } else {\n        var _userData = {\n          name: this.state.nameText,\n          gender: this.state.genderText,\n          age: this.state.ageValue,\n          birthday: this.state.birthdayText,\n          businessIDs: [],\n          shippingAddress: []\n        };\n\n        if (this.props.infoUpdateCallback) {\n          this.props.infoUpdateCallback(this.state.emailText, this.state.passText, _userData);\n          return;\n        }\n      }\n\n      if (this.props.infoUpdateCallback) {\n        this.props.infoUpdateCallback(undefined, undefined, undefined);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.signupHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, \"Sign Up\"), React.createElement(ScrollView, {\n        contentContainerStyle: defaults.pageContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.inputDescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, \"This will be used when messaging businesses.\"), React.createElement(TextInputBox, {\n        style: {\n          borderColor: this.state.validName ? styleValues.validColor : styleValues.darkColor\n        },\n        extraTextProps: _objectSpread(_objectSpread(_objectSpread({}, this.defaultTextProps), {\n          onChangeText: function onChangeText(text) {\n            var validName;\n            return _regeneratorRuntime.async(function onChangeText$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _this2.setState({\n                      nameText: text\n                    });\n\n                    validName = false;\n\n                    if (text.length > 0) {\n                      validName = true;\n\n                      if (_this2.state.lastInvalid == \"name\") {\n                        _this2.setState({\n                          responseText: \"\"\n                        });\n                      }\n                    } else {\n                      if (_this2.state.lastInvalid == \"name\") {\n                        _this2.setState({\n                          responseText: \"Please enter a name.\"\n                        });\n                      }\n                    }\n\n                    _this2.setState({\n                      validName: validName\n                    }, _this2.sendBackValues);\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }\n        }), {}, {\n          placeholder: \"Name\",\n          autoCapitalize: \"words\",\n          textContentType: \"name\",\n          autoCompleteType: \"name\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, this.state.nameText), React.createElement(Text, {\n        style: styles.inputDescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, \"This will be used to sign in to your account.\"), React.createElement(TextInputBox, {\n        style: {\n          borderColor: this.state.validEmail ? styleValues.validColor : styleValues.invalidColor\n        },\n        extraTextProps: _objectSpread(_objectSpread({}, this.defaultTextProps), {\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              emailText: text\n            });\n\n            var validEmail = false;\n\n            if (/^[a-z0-9\\.\\_\\-]+@[a-z0-9\\.\\-]+\\.[a-z0-9]+$/m.test(text.toLowerCase())) {\n              validEmail = true;\n\n              if (_this2.state.lastInvalid == \"email\") {\n                _this2.setState({\n                  responseText: \"\"\n                });\n              }\n            } else {\n              if (_this2.state.lastInvalid == \"email\") {\n                _this2.setState({\n                  responseText: \"Please enter a valid email.\"\n                });\n              }\n            }\n\n            _this2.setState({\n              validEmail: validEmail\n            }, _this2.sendBackValues);\n          },\n          placeholder: \"Email\",\n          textContentType: \"emailAddress\",\n          autoCompleteType: \"email\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      }, this.state.emailText), React.createElement(Text, {\n        style: styles.inputDescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, \"Use at least 6 characters in your password.\"), React.createElement(TextInputBox, {\n        style: {\n          borderColor: this.state.validPass ? styleValues.validColor : styleValues.invalidColor\n        },\n        extraTextProps: _objectSpread(_objectSpread({}, this.defaultTextProps), {\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              passText: text\n            });\n\n            var validPass = false;\n\n            if (text.length > 5) {\n              validPass = true;\n\n              if (_this2.state.lastInvalid == \"pass\") {\n                _this2.setState({\n                  responseText: \"\"\n                });\n              }\n            } else {\n              if (_this2.state.lastInvalid == \"pass\") {\n                _this2.setState({\n                  responseText: \"Please enter a valid password.\"\n                });\n              }\n            }\n\n            _this2.setState({\n              validPass: validPass\n            }, _this2.sendBackValues);\n          },\n          placeholder: \"Password\",\n          textContentType: \"newPassword\",\n          secureTextEntry: true\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, this.state.passText), React.createElement(TextInputBox, {\n        style: {\n          borderColor: this.state.validConfirm ? styleValues.validColor : styleValues.invalidColor\n        },\n        extraTextProps: _objectSpread(_objectSpread({}, this.defaultTextProps), {\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              confirmPassText: text\n            });\n\n            var validConfirm = false;\n\n            if (text == _this2.state.passText) {\n              validConfirm = true;\n\n              if (_this2.state.lastInvalid == \"confirm\") {\n                _this2.setState({\n                  responseText: \"\"\n                });\n              }\n            } else {\n              if (_this2.state.lastInvalid == \"confirm\") {\n                _this2.setState({\n                  responseText: \"Your password does not match the confirmation.\"\n                });\n              }\n            }\n\n            _this2.setState({\n              validConfirm: validConfirm\n            }, _this2.sendBackValues);\n          },\n          placeholder: \"Confirm password\",\n          textContentType: \"newPassword\",\n          secureTextEntry: true\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, this.state.confirmPassText), React.createElement(Text, {\n        style: styles.inputDescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }\n      }, \"You must be 13 years of age or older to use this service.\"), React.createElement(DateScrollPicker, {\n        style: {\n          borderColor: this.state.validBirthday ? styleValues.validColor : styleValues.invalidColor\n        },\n        extraProps: {\n          value: this.state.birthdayValue,\n          onChange: function onChange(event, date) {\n            if (!date) {\n              throw new Error(\"No date object given when date changed\");\n            }\n\n            var dateString = date.toLocaleDateString();\n            var today = new Date();\n            var timeDiff = (today.getTime() - date.getTime()) / 86400000;\n            var isValid = timeDiff >= 4748.12;\n            var age = Math.floor(timeDiff / 365.24);\n\n            _this2.setState({\n              birthdayText: dateString,\n              birthdayValue: date,\n              ageValue: age,\n              validBirthday: isValid\n            }, _this2.sendBackValues);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: styles.inputDescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }\n      }, \"Select a gender.\"), React.createElement(TextDropdown, {\n        style: {\n          borderColor: this.state.validGender ? styleValues.validColor : styleValues.invalidColor\n        },\n        extraProps: {\n          items: [{\n            label: \"Male\",\n            value: \"male\"\n          }, {\n            label: \"Female\",\n            value: \"female\"\n          }, {\n            label: \"Nonbinary\",\n            value: \"nonbinary\"\n          }],\n          placeholder: \"Gender\",\n          onChangeItem: function onChangeItem(item) {\n            var value = item.value;\n            var isValid = value === \"male\" || value === \"female\" || value === \"nonbinary\";\n\n            _this2.setState({\n              genderText: value,\n              validGender: isValid\n            }, _this2.sendBackValues);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: styles.inputDescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }\n      }, this.state.responseText)));\n    }\n  }]);\n\n  return CustomerInfoPage;\n}(Component);\n\nexport { CustomerInfoPage as default };\nvar styles = StyleSheet.create({\n  loadingScreen: {\n    position: \"absolute\",\n    top: 0,\n    backgroundColor: \"#fff\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  signupHeader: {\n    fontSize: styleValues.largestTextSize\n  },\n  inputElement: {\n    width: styleValues.winWidth - 2 * styleValues.mediumPadding,\n    height: styleValues.winWidth / 10,\n    fontSize: styleValues.smallestTextSize,\n    backgroundColor: \"#fff\",\n    borderWidth: 2,\n    borderRadius: styleValues.mediumPadding,\n    marginBottom: styleValues.mediumPadding,\n    alignItems: \"center\"\n  },\n  pickerText: {\n    textAlignVertical: \"center\",\n    textAlign: \"center\",\n    height: \"100%\",\n    width: \"100%\"\n  },\n  inputDescription: {\n    width: styleValues.winWidth - 2 * styleValues.mediumPadding,\n    textAlign: \"left\",\n    fontSize: styleValues.smallestTextSize,\n    padding: styleValues.mediumPadding\n  },\n  genderPicker: {\n    borderTopLeftRadius: styleValues.mediumPadding,\n    borderTopRightRadius: styleValues.mediumPadding,\n    borderBottomLeftRadius: styleValues.mediumPadding,\n    borderBottomRightRadius: styleValues.mediumPadding,\n    borderWidth: 0,\n    height: \"100%\",\n    width: \"100%\"\n  }\n});\nvar pickerSelectStyles = StyleSheet.create({\n  inputIOS: styles.inputElement,\n  inputAndroid: styles.inputElement\n});","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/SignupPages/CustomerInfoPage.tsx"],"names":["React","Component","styleValues","defaults","TextInputBox","DateScrollPicker","TextDropdown","CustomerInfoPage","defaultTextProps","autoCorrect","autoCapitalize","clearButtonMode","today","Date","state","nameText","validName","emailText","validEmail","passText","validPass","confirmPassText","validConfirm","birthdayValue","ageValue","birthdayText","validBirthday","genderText","validGender","responseText","lastInvalid","back","props","navigation","goBack","setState","userData","name","gender","age","birthday","businessIDs","shippingAddress","infoUpdateCallback","undefined","styles","signupHeader","pageContainer","inputDescription","borderColor","validColor","darkColor","onChangeText","text","length","sendBackValues","placeholder","textContentType","autoCompleteType","invalidColor","test","toLowerCase","secureTextEntry","value","onChange","event","date","Error","dateString","toLocaleDateString","timeDiff","getTime","isValid","Math","floor","items","label","onChangeItem","item","StyleSheet","create","loadingScreen","position","top","backgroundColor","width","height","fontSize","largestTextSize","inputElement","winWidth","mediumPadding","smallestTextSize","borderWidth","borderRadius","marginBottom","alignItems","pickerText","textAlignVertical","textAlign","padding","genderPicker","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","pickerSelectStyles","inputIOS","inputAndroid"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View, ScrollView, Text, StyleSheet, TextInput, ActivityIndicator } from \"react-native\";\nimport { styleValues, defaults, icons } from \"../HelperFiles/StyleSheet\";\nimport { TextInputBox, DateScrollPicker, TextDropdown } from \"../HelperFiles/CompIndex\";\nimport { auth, googleAPIKey } from \"../HelperFiles/Constants\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { UserSignupStackParamList } from \"../HelperFiles/Navigation\";\nimport { RouteProp } from '@react-navigation/native';\nimport ServerData from \"../HelperFiles/ServerData\";\nimport { UserData } from \"../HelperFiles/DataTypes\";\nimport DropDownPicker from 'react-native-dropdown-picker';\n\ntype CustomerInfoNavigationProp = StackNavigationProp<UserSignupStackParamList, \"customerInfo\">;\n\ntype CustomerInfoRouteProp = RouteProp<UserSignupStackParamList, \"customerInfo\">;\n\ntype Props = {\n    navigation: CustomerInfoNavigationProp,\n    route: CustomerInfoRouteProp\n    infoUpdateCallback?: (email?: string, password?: string, userData?: UserData) => void\n}\n\ntype State = {\n    nameText: string,\n    validName: boolean,\n    emailText: string,\n    validEmail: boolean,\n    passText: string,\n    validPass: boolean,\n    confirmPassText: string,\n    validConfirm: boolean,\n    birthdayValue: Date,\n    birthdayText: string,\n    ageValue: number,\n    validBirthday: boolean,\n    genderText: \"male\" | \"female\" | \"nonbinary\" | null,\n    validGender: boolean,\n    responseText: string,\n    lastInvalid: string,  \n}\n\n\nexport default class CustomerInfoPage extends Component<Props, State> {\n\n    defaultTextProps: TextInput['props'] = {\n        autoCorrect: false,\n        autoCapitalize: \"none\",\n        clearButtonMode: \"while-editing\",\n    }\n    today = new Date();\n\n    state: Readonly<State> = {\n        nameText: \"\",\n        validName: false,\n        emailText: \"\",\n        validEmail: false,\n        passText: \"\",\n        validPass: false,\n        confirmPassText: \"\",\n        validConfirm: false,\n        birthdayValue: this.today,\n        ageValue: 0,\n        birthdayText: \"\",\n        validBirthday: false,\n        genderText: null,\n        validGender: false,\n        responseText: \"\",\n        lastInvalid: \"\",\n    }\n\n    sendBackValues() {\n        // Check for invalid inputs\n        if (!this.state.validName) {\n            this.setState({responseText: \"Please enter a name.\", lastInvalid: \"name\"});\n        } else if (!this.state.validEmail) {\n            this.setState({responseText: \"Please enter a valid email.\", lastInvalid: \"email\"});\n        } else if (!this.state.validPass) {\n            this.setState({responseText: \"Please enter a valid password.\", lastInvalid: \"pass\"});\n        } else if (!this.state.validConfirm) {\n            this.setState({responseText: \"Your password does not match the confirmation.\", lastInvalid: \"confirm\"});\n        } else if (!this.state.validBirthday) {\n            this.setState({responseText: \"You must be 13 years of age or older to use this service.\", lastInvalid: \"confirm\"});\n        } else if (!this.state.validGender) {\n            this.setState({responseText: \"Please select your gender.\", lastInvalid: \"confirm\"});\n        } else {\n            const userData: UserData = {\n                name: this.state.nameText,\n                gender: this.state.genderText!,\n                age: this.state.ageValue,\n                birthday: this.state.birthdayText,\n                businessIDs: [],\n                shippingAddress: []\n            }\n            // Send values up to navigator screen\n            if (this.props.infoUpdateCallback) {\n                this.props.infoUpdateCallback(this.state.emailText, this.state.passText, userData)\n                return\n            }\n        }\n        // Send back no values to indicate there are invalid inputs\n        if (this.props.infoUpdateCallback) {\n            this.props.infoUpdateCallback(undefined, undefined, undefined)\n        }\n    }\n\n  back = () => this.props.navigation.goBack();  \n\n  render() {\n        return (\n        <View>\n            <Text style={styles.signupHeader}>\n                Sign Up\n            </Text>\n            <ScrollView \n                contentContainerStyle={defaults.pageContainer}\n            >\n                <Text style={styles.inputDescription}>\n                    This will be used when messaging businesses.\n                </Text>\n                <TextInputBox\n                    style={{borderColor: this.state.validName ? styleValues.validColor : styleValues.darkColor}}\n                    extraTextProps={{...this.defaultTextProps, ...{\n                        onChangeText: async (text) => {\n                            this.setState({nameText: text});\n                            let validName = false\n                            if (text.length > 0) {\n                                validName = true\n                                if (this.state.lastInvalid == \"name\") {\n                                    this.setState({responseText: \"\"});\n                                }\n                            } else {\n                                if (this.state.lastInvalid == \"name\") {\n                                    this.setState({responseText: \"Please enter a name.\"});\n                                }\n                            }\n                            this.setState({validName: validName}, this.sendBackValues)\n                        }},\n                        placeholder: \"Name\",\n                        autoCapitalize: \"words\",\n                        textContentType: \"name\",\n                        autoCompleteType: \"name\"\n                    }}\n                >\n                    {this.state.nameText}\n                </TextInputBox>\n                <Text style={styles.inputDescription}>\n                    This will be used to sign in to your account.\n                </Text>\n                <TextInputBox\n                    style={{borderColor: this.state.validEmail ? styleValues.validColor : styleValues.invalidColor}}\n                    extraTextProps={{...this.defaultTextProps, ...{\n                        onChangeText: (text) => {\n                            this.setState({emailText: text});\n                            let validEmail = false\n                            // Regular expression for an email\n                            if (/^[a-z0-9\\.\\_\\-]+@[a-z0-9\\.\\-]+\\.[a-z0-9]+$/m.test(text.toLowerCase())) {\n                                validEmail = true\n                                if (this.state.lastInvalid == \"email\") {\n                                    this.setState({responseText: \"\"});\n                                }\n                            } else {\n                                if (this.state.lastInvalid == \"email\") {\n                                    this.setState({responseText: \"Please enter a valid email.\"});\n                                }\n                            }\n                            this.setState({validEmail: validEmail}, this.sendBackValues)\n                        },\n                        placeholder: \"Email\",\n                        textContentType: \"emailAddress\",\n                        autoCompleteType: \"email\",\n                    }}}\n                >\n                    {this.state.emailText}\n                </TextInputBox>\n                <Text style={styles.inputDescription}>\n                    Use at least 6 characters in your password.\n                </Text>\n                <TextInputBox\n                    style={{borderColor: this.state.validPass ? styleValues.validColor : styleValues.invalidColor}}\n                    extraTextProps={{...this.defaultTextProps, ...{\n                        onChangeText: (text) => {\n                            this.setState({passText: text});\n                            let validPass = false\n                            if (text.length > 5) {\n                                validPass = true\n                                if (this.state.lastInvalid == \"pass\") {\n                                    this.setState({responseText: \"\"});\n                                }\n                            } else {\n                                if (this.state.lastInvalid == \"pass\") {\n                                    this.setState({responseText: \"Please enter a valid password.\"});\n                                }\n                            }\n                            this.setState({validPass: validPass}, this.sendBackValues);\n                        },\n                        placeholder: \"Password\",\n                        textContentType: \"newPassword\",\n                        secureTextEntry: true,\n                    }}}\n                >\n                    {this.state.passText}\n                </TextInputBox>\n                <TextInputBox\n                    style={{borderColor: this.state.validConfirm ? styleValues.validColor : styleValues.invalidColor}}\n                    extraTextProps={{...this.defaultTextProps, ...{\n                        onChangeText: (text) => {\n                            this.setState({confirmPassText: text});\n                            let validConfirm = false\n                            if (text == this.state.passText) {\n                                validConfirm = true\n                                if (this.state.lastInvalid == \"confirm\") {\n                                    this.setState({responseText: \"\"});\n                                }\n                            } else {\n                                if (this.state.lastInvalid == \"confirm\") {\n                                    this.setState({responseText: \"Your password does not match the confirmation.\"});\n                                }\n                            }\n                            this.setState({validConfirm: validConfirm}, this.sendBackValues);\n                        },\n                        placeholder: \"Confirm password\",\n                        textContentType: \"newPassword\",\n                        secureTextEntry: true,\n                    }}}\n                >\n                    {this.state.confirmPassText}\n                </TextInputBox>\n                <Text style={styles.inputDescription}>\n                    You must be 13 years of age or older to use this service.\n                </Text>\n                <DateScrollPicker\n                    style={{borderColor: this.state.validBirthday ? styleValues.validColor : styleValues.invalidColor}}\n                    extraProps={{\n                        value: this.state.birthdayValue,\n                        onChange: (event, date) => {\n                            if (!date) {\n                                throw new Error(\"No date object given when date changed\");\n                            }\n                            const dateString = date.toLocaleDateString();\n                            const today = new Date();\n                            // Get number of days between today and birthday\n                            const timeDiff = (today.getTime() - date.getTime())/(86400000);\n                            // Check if this birthday is more than 13 years old (365.24*13=4748.12)\n                            const isValid = timeDiff >= 4748.12\n                            const age = Math.floor(timeDiff/365.24)\n                            this.setState({birthdayText: dateString, birthdayValue: date, ageValue: age, validBirthday: isValid}, this.sendBackValues)\n                        }\n                    }}\n                ></DateScrollPicker>\n                <Text style={styles.inputDescription}>\n                    Select a gender.\n                </Text>\n                <TextDropdown\n                    style={{borderColor: this.state.validGender ? styleValues.validColor : styleValues.invalidColor}}\n                    extraProps={{\n                        items: [\n                            {label: \"Male\", value: \"male\"},\n                            {label: \"Female\", value: \"female\"},\n                            {label: \"Nonbinary\", value: \"nonbinary\"}\n                        ],\n                        placeholder: \"Gender\",\n                        onChangeItem: (item) => {\n                            const value = item.value;\n                            // Check if a gender has been selected, then update state\n                            const isValid = value === \"male\" || value === \"female\" || value === \"nonbinary\";\n                            this.setState({genderText: value, validGender: isValid}, this.sendBackValues);\n                        },\n                    }}\n                ></TextDropdown>\n                <Text style={styles.inputDescription}>\n                    {this.state.responseText}\n                </Text>\n            </ScrollView>\n        </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    loadingScreen: {\n        position: \"absolute\",\n        top: 0,\n        backgroundColor: \"#fff\",\n        width: \"100%\",\n        height: \"100%\",\n    },\n    signupHeader: {\n        fontSize: styleValues.largestTextSize,\n    },\n    inputElement: {\n        width: styleValues.winWidth-2*styleValues.mediumPadding,\n        height: styleValues.winWidth/10,\n        fontSize: styleValues.smallestTextSize,\n        backgroundColor: \"#fff\",\n        borderWidth: 2,\n        borderRadius: styleValues.mediumPadding,\n        marginBottom: styleValues.mediumPadding,\n        alignItems: \"center\"\n    },\n    pickerText: {\n        textAlignVertical: \"center\",\n        textAlign: \"center\",\n        height: \"100%\",\n        width: \"100%\",\n    },\n    inputDescription: {\n        width: styleValues.winWidth-2*styleValues.mediumPadding,\n        textAlign: \"left\",\n        fontSize: styleValues.smallestTextSize,\n        padding: styleValues.mediumPadding,\n    },\n    genderPicker: {\n        // Must use individual border radii, as borderRadius does not work\n        borderTopLeftRadius: styleValues.mediumPadding,\n        borderTopRightRadius: styleValues.mediumPadding,\n        borderBottomLeftRadius: styleValues.mediumPadding,\n        borderBottomRightRadius: styleValues.mediumPadding,\n        borderWidth: 0,\n        height: \"100%\",\n        width: \"100%\",\n    }\n})\n\nconst pickerSelectStyles = StyleSheet.create({\n    inputIOS: styles.inputElement,\n    inputAndroid: styles.inputElement\n})"]},"metadata":{},"sourceType":"module"}