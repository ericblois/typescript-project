{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ericblois/Development/React Native/typescript-project/app/CustomComponents/TextButton.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { styleValues } from \"../HelperFiles/StyleSheet\";\n\nvar TextButton = function (_Component) {\n  _inherits(TextButton, _Component);\n\n  var _super = _createSuper(TextButton);\n\n  function TextButton() {\n    _classCallCheck(this, TextButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextButton, [{\n    key: \"renderSubtext\",\n    value: function renderSubtext() {\n      if (this.props.subtext) {\n        return React.createElement(Text, {\n          style: [styles.subtextStyle, this.props.subtextStyle],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }\n        }, this.props.subtext);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"renderLeftIcon\",\n    value: function renderLeftIcon() {\n      if (this.props.leftIconSource) {\n        return React.createElement(Image, {\n          source: this.props.leftIconSource,\n          style: _objectSpread(_objectSpread({}, styles.iconStyle), this.props.leftIconStyle),\n          resizeMethod: \"scale\",\n          resizeMode: \"center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"renderRightIcon\",\n    value: function renderRightIcon() {\n      if (this.props.rightIconSource) {\n        return React.createElement(Image, {\n          source: this.props.rightIconSource,\n          style: _objectSpread(_objectSpread({}, styles.iconStyle), this.props.rightIconStyle),\n          resizeMethod: \"scale\",\n          resizeMode: \"contain\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TouchableOpacity, {\n        style: [styles.buttonStyle, this.props.buttonStyle],\n        onPress: this.props.buttonFunc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [styles.textStyle, this.props.textStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }, this.props.text), this.renderSubtext()), this.renderRightIcon());\n    }\n  }], [{\n    key: \"createButtons\",\n    value: function createButtons(buttonData) {\n      var _this = this;\n\n      var buttons = buttonData.map(function (button, index) {\n        return React.createElement(TextButton, {\n          text: button.text,\n          buttonFunc: button.buttonFunc,\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 16\n          }\n        });\n      });\n      return buttons;\n    }\n  }]);\n\n  return TextButton;\n}(Component);\n\nexport { TextButton as default };\nvar styles = StyleSheet.create({\n  textStyle: {\n    textAlign: \"center\",\n    fontSize: styleValues.smallTextSize,\n    color: styleValues.majorTextColor\n  },\n  subtextStyle: {\n    textAlign: \"center\",\n    fontSize: styleValues.smallestTextSize,\n    color: styleValues.minorTextColor\n  },\n  iconStyle: {\n    aspectRatio: 1,\n    maxWidth: \"10%\",\n    maxHeight: \"50%\",\n    tintColor: styleValues.darkGreyColor,\n    alignSelf: \"center\",\n    flexWrap: \"wrap\"\n  },\n  buttonStyle: {\n    alignContent: \"center\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    height: styleValues.winWidth * 0.15\n  }\n});","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/CustomComponents/TextButton.tsx"],"names":["React","Component","styleValues","TextButton","props","subtext","styles","subtextStyle","undefined","leftIconSource","iconStyle","leftIconStyle","rightIconSource","rightIconStyle","buttonStyle","buttonFunc","flex","alignItems","justifyContent","textStyle","text","renderSubtext","renderRightIcon","buttonData","buttons","map","button","index","StyleSheet","create","textAlign","fontSize","smallTextSize","color","majorTextColor","smallestTextSize","minorTextColor","aspectRatio","maxWidth","maxHeight","tintColor","darkGreyColor","alignSelf","flexWrap","alignContent","width","height","winWidth"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { View, TouchableOpacity, Text, StyleSheet, TextStyle, ViewStyle, Image, GestureResponderEvent, ImageStyle } from \"react-native\";\nimport PropTypes from 'prop-types';\nimport { NavigationProp, useNavigation } from \"@react-navigation/native\"\nimport { styleValues } from \"../HelperFiles/StyleSheet\";\n\ntype Props = {\n    text: string,\n    textStyle?: TextStyle,\n    subtext?: string,\n    subtextStyle?: TextStyle,\n    leftIconSource?: number,\n    leftIconStyle?: ImageStyle,\n    rightIconSource?: number,\n    rightIconStyle?: ImageStyle,\n    buttonStyle?: ViewStyle,\n    buttonFunc?: (event?: GestureResponderEvent) => void\n}\n\ntype State = {}\n\nexport default class TextButton extends Component<Props, State> {\n\n    static createButtons(buttonData: Props[]) {\n        const buttons = buttonData.map((button: Props, index) => {\n        return <TextButton text={button.text} buttonFunc={button.buttonFunc} key={index}/>;\n        })\n        return buttons;\n    }\n\n    renderSubtext() {\n        if (this.props.subtext) {\n            return (\n                <Text style = {[styles.subtextStyle, this.props.subtextStyle]}>\n                    {this.props.subtext!}\n                </Text>\n            )\n        }\n        return undefined\n    }\n\n    renderLeftIcon() {\n        if (this.props.leftIconSource) {\n            return (\n                <Image\n                    source={this.props.leftIconSource}\n                    style = {{...styles.iconStyle, ...this.props.leftIconStyle}}\n                    resizeMethod={\"scale\"}\n                    resizeMode={\"center\"}\n                />\n            )\n        }\n        return undefined\n    }\n\n    renderRightIcon() {\n        if (this.props.rightIconSource) {\n            return (\n                <Image\n                    source={this.props.rightIconSource}\n                    style = {{...styles.iconStyle, ...this.props.rightIconStyle}}\n                    resizeMethod={\"scale\"}\n                    resizeMode={\"contain\"}\n                />\n            )\n        }\n        return undefined\n    }\n\n    render() {\n        return (\n            <TouchableOpacity\n            style={[styles.buttonStyle, this.props.buttonStyle]}\n            onPress={this.props.buttonFunc}\n            >\n                <View style={{flex: 1, alignItems: \"center\", justifyContent: \"center\"}}>\n                    <Text style = {[styles.textStyle, this.props.textStyle]}>\n                        {this.props.text}\n                    </Text>\n                    {this.renderSubtext()}\n                </View>\n                {this.renderRightIcon()}\n            </TouchableOpacity>\n            )\n    }\n}\n\nconst styles = StyleSheet.create({\n    textStyle: {\n        textAlign: \"center\",\n        fontSize: styleValues.smallTextSize,\n        color: styleValues.majorTextColor,\n    },\n    subtextStyle: {\n        textAlign: \"center\",\n        fontSize: styleValues.smallestTextSize,\n        color: styleValues.minorTextColor\n    },\n    iconStyle: {\n        aspectRatio: 1,\n        maxWidth: \"10%\",\n        maxHeight: \"50%\",\n        tintColor: styleValues.darkGreyColor,\n        alignSelf: \"center\",\n        flexWrap: \"wrap\"\n    },\n    buttonStyle: {\n        alignContent: \"center\",\n        justifyContent: \"space-between\",\n        width: \"100%\",\n        height: styleValues.winWidth*0.15\n    },\n});\n"]},"metadata":{},"sourceType":"module"}