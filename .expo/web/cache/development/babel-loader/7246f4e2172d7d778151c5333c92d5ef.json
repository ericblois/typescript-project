{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport BusinessDataHandler from \"./BusinessDataHandler\";\nimport { auth, firestore, locationDocString } from \"./Constants\";\n\nvar ServerData = function ServerData() {\n  _classCallCheck(this, ServerData);\n};\n\nServerData.addDocument = function _callee(data, destinationCol, docID) {\n  var newDocSnap;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          if (!docID) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(destinationCol.doc(docID).get());\n\n        case 4:\n          newDocSnap = _context.sent;\n\n          if (newDocSnap.exists) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(destinationCol.doc(docID).set(data));\n\n        case 8:\n          return _context.abrupt(\"return\", destinationCol.doc(docID));\n\n        case 9:\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(destinationCol.add(data));\n\n        case 11:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 14]], Promise);\n};\n\nServerData.overwriteDocument = function _callee2(data, docRef) {\n  var result;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(docRef.set(data));\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 9;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw _context2.t0;\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nServerData.moveDocument = function _callee3(sourceDoc, destinationCol) {\n  var docSnap, data, docRef;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(sourceDoc.get());\n\n        case 3:\n          docSnap = _context3.sent;\n\n          if (docSnap.exists) {\n            _context3.next = 6;\n            break;\n          }\n\n          throw new Error(\"Could not find a document at location: \" + sourceDoc);\n\n        case 6:\n          data = docSnap.data();\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(ServerData.addDocument(data, destinationCol, sourceDoc.id));\n\n        case 9:\n          docRef = _context3.sent;\n          _context3.next = 12;\n          return _regeneratorRuntime.awrap(sourceDoc.delete());\n\n        case 12:\n          return _context3.abrupt(\"return\", docRef);\n\n        case 15:\n          _context3.prev = 15;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw _context3.t0;\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 15]], Promise);\n};\n\nServerData.createNewUser = function _callee4(email, pass, userData) {\n  var _cred$user, _cred$user2, cred, userDataCol, userDoc;\n\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(auth.createUserWithEmailAndPassword(email, pass));\n\n        case 3:\n          cred = _context4.sent;\n          (_cred$user = cred.user) == null ? void 0 : _cred$user.updateProfile({\n            displayName: userData.name\n          });\n          userDataCol = firestore.collection(\"/userData\");\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(ServerData.addDocument(userData, userDataCol, (_cred$user2 = cred.user) == null ? void 0 : _cred$user2.uid));\n\n        case 8:\n          userDoc = _context4.sent;\n          return _context4.abrupt(\"return\", userDoc);\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](0);\n          throw _context4.t0;\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n};\n\nServerData.createNewBusiness = function _callee5() {\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nServerData.queryBusinesses = function _callee6(searchTerms) {\n  var cityCol, queryResults, businesses;\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          cityCol = firestore.collection(locationDocString + \"/ids\");\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(cityCol.where('keywords', 'array-contains-any', searchTerms).get());\n\n        case 4:\n          queryResults = _context6.sent;\n          businesses = [];\n          queryResults.forEach(function (refSnap) {\n            businesses.push(BusinessDataHandler.create(refSnap.id, refSnap));\n          });\n          return _context6.abrupt(\"return\", businesses);\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](0);\n          throw _context6.t0;\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nexport { ServerData as default };","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/HelperFiles/ServerData.ts"],"names":["BusinessDataHandler","auth","firestore","locationDocString","ServerData","addDocument","data","destinationCol","docID","doc","get","newDocSnap","exists","set","add","overwriteDocument","docRef","result","moveDocument","sourceDoc","docSnap","Error","id","delete","createNewUser","email","pass","userData","createUserWithEmailAndPassword","cred","user","updateProfile","displayName","name","userDataCol","collection","uid","userDoc","createNewBusiness","queryBusinesses","searchTerms","cityCol","where","queryResults","businesses","forEach","refSnap","push","create"],"mappings":"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","sourcesContent":["import BusinessDataHandler from \"./BusinessDataHandler\";\nimport { auth, firestore, locationDocString } from \"./Constants\";\nimport { UserData, PrivateBusinessData } from \"./DataTypes\";\n\nexport default class ServerData {\n\n    // Add a document to a collection, optionally with a custom ID\n    static addDocument = async (data: object, destinationCol: firebase.default.firestore.CollectionReference, docID?: string) => {\n      try {\n        // Check if there is a specific doc ID to be made\n        if (docID) {\n          // Get a snapshot of the new location for the document\n          const newDocSnap = await destinationCol.doc(docID).get();\n          // Check if no document with the same ID exists in the collection\n          if (!newDocSnap.exists) {\n            // Create a new document with the specified ID\n            await destinationCol.doc(docID).set(data);\n            return destinationCol.doc(docID);\n          }\n        }\n        // Add a document with a new ID to the collection\n        return await destinationCol.add(data)\n      } catch (e) {\n        throw e;\n      }\n    }\n    // Overwrite an existing document\n    static overwriteDocument = async (data: object, docRef: firebase.default.firestore.DocumentReference) => {\n      try {\n        // Write the document to the collection\n        const result = await docRef.set(data);\n      } catch (e) {\n        throw e;\n      }\n    }\n    // Move a document to a new collection\n    static moveDocument = async (sourceDoc: firebase.default.firestore.DocumentReference, destinationCol: firebase.default.firestore.CollectionReference) => {\n      try {\n        const docSnap = await sourceDoc.get()\n        // Check if document exists\n        if (!docSnap.exists) {\n          throw new Error(\"Could not find a document at location: \" + sourceDoc);\n        }\n        const data = docSnap.data() as firebase.default.firestore.DocumentData;\n        const docRef = await ServerData.addDocument(data, destinationCol, sourceDoc.id)\n        await sourceDoc.delete();\n        return docRef;\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    // Create a new user from a UserData object\n    static createNewUser = async (email: string, pass: string, userData: UserData) => {\n      try {\n        // Create a new user account using email\n        const cred = await auth.createUserWithEmailAndPassword(email, pass)\n        // Add name to user account\n        cred.user?.updateProfile({ displayName: userData.name })\n        // Create a new user document\n        const userDataCol = firestore.collection(\"/userData\");\n        const userDoc = await ServerData.addDocument(userData, userDataCol, cred.user?.uid)\n        // Return the user document's reference\n        return userDoc;\n      } catch (e) {\n        throw e;\n      }\n    }\n    // Create a new business page\n    static createNewBusiness= async () => {\n\n    }\n\n    static queryBusinesses = async (searchTerms: string[]) => {\n      try {\n        // Get the city's collection of business references\n        const cityCol = firestore.collection(locationDocString + \"/ids\");\n        // Get all business references matching the query terms\n        const queryResults = await cityCol.where('keywords', 'array-contains-any', searchTerms).get();\n        // Create a list of PrivateBusinessData objects\n        const businesses: PrivateBusinessData[] = [];\n        queryResults.forEach((refSnap) => {\n          businesses.push(BusinessDataHandler.create(refSnap.id, refSnap));\n        })\n        return businesses;\n      } catch (e) {\n        throw e;\n      }\n    }\n}"]},"metadata":{},"sourceType":"module"}