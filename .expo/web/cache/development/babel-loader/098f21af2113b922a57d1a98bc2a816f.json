{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport { firestore, isBusinessInfo, isProductList } from \"./Constants\";\n\nvar BusinessDataHandler = function BusinessDataHandler() {\n  _classCallCheck(this, BusinessDataHandler);\n\n  this.isValid = function (businessData) {\n    return isBusinessInfo(businessData.info) && isProductList(businessData.productList);\n  };\n\n  if (this.constructor === BusinessDataHandler) {\n    throw new TypeError('Abstract class \"BusinessDataHandler\" cannot be instantiated directly.');\n  }\n};\n\nBusinessDataHandler.create = function (businessID, businessDocSnap) {\n  if (businessDocSnap) {\n    var businessData = {\n      businessID: businessDocSnap.id,\n      docReference: businessDocSnap.ref,\n      docSnapshot: businessDocSnap\n    };\n    BusinessDataHandler.getProductRefList(businessData);\n    BusinessDataHandler.getBusinessInfo(businessData);\n    return businessData;\n  } else {\n    var _businessData = {\n      businessID: businessID,\n      docReference: firestore.doc(\"/publicBusinessData/\" + businessID)\n    };\n    return _businessData;\n  }\n};\n\nBusinessDataHandler.getBusinessSnapshot = function _callee(businessData) {\n  var snap;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (businessData.docSnapshot) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(businessData.docReference.get().catch(function (e) {\n            throw e;\n          }));\n\n        case 3:\n          snap = _context.sent;\n\n          if (snap.exists) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"No document exists for business ID: \" + businessData.businessID);\n\n        case 8:\n          businessData.docSnapshot = snap;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nBusinessDataHandler.getProductRefList = function _callee2(businessData) {\n  var productRefList;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (businessData.productListReference) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(BusinessDataHandler.getBusinessSnapshot(businessData).catch(function (e) {\n            throw e;\n          }));\n\n        case 3:\n          productRefList = businessData.docSnapshot.get(\"productList\");\n\n          if (productRefList) {\n            _context2.next = 8;\n            break;\n          }\n\n          throw new Error(\"Could not retrieve a product list from business ID: \" + businessData.businessID);\n\n        case 8:\n          businessData.productListReference = productRefList;\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nBusinessDataHandler.getBusinessInfo = function _callee3(businessData) {\n  var snapData, productList, reducedData, businessInfo;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (businessData.info) {\n            _context3.next = 16;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(BusinessDataHandler.getBusinessSnapshot(businessData).catch(function (e) {\n            throw e;\n          }));\n\n        case 3:\n          snapData = businessData.docSnapshot.data();\n\n          if (!(snapData && \"productList\" in snapData)) {\n            _context3.next = 15;\n            break;\n          }\n\n          if (!businessData.productListReference) {\n            businessData.productListReference = snapData.productList;\n          }\n\n          productList = snapData.productList, reducedData = _objectWithoutProperties(snapData, [\"productList\"]);\n          businessInfo = reducedData;\n\n          if (!businessInfo) {\n            _context3.next = 12;\n            break;\n          }\n\n          businessData.info = businessInfo;\n          _context3.next = 13;\n          break;\n\n        case 12:\n          throw new TypeError(\"Could not convert server business data to PublicBusinessData object\");\n\n        case 13:\n          _context3.next = 16;\n          break;\n\n        case 15:\n          throw new Error(\"No document or field productList exists for business ID: \" + businessData.businessID);\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nBusinessDataHandler.getBusinessProductList = function _callee4(businessData) {\n  var productList;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (businessData.productList) {\n            _context4.next = 7;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(BusinessDataHandler.getProductRefList(businessData).catch(function (e) {\n            throw e;\n          }));\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(businessData.productListReference.map(function (refCategory) {\n            var productCategory = Promise.all(refCategory.products.map(function (productRef) {\n              return productRef.get().then(function (productSnap) {\n                var productData = productSnap.data();\n\n                if (!productData) {\n                  throw new Error(\"Could not retrieve a product from business ID: \" + businessData.businessID);\n                }\n\n                return productData;\n              }, function (e) {\n                throw e;\n              });\n            })).then(function (products) {\n              var productCat = {\n                category: refCategory.category,\n                products: products\n              };\n              return productCat;\n            }, function (e) {\n              throw e;\n            });\n            return productCategory;\n          })));\n\n        case 5:\n          productList = _context4.sent;\n          businessData.productList = productList;\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport { BusinessDataHandler as default };","map":{"version":3,"sources":["/Users/ericblois/Development/React Native/typescript-project/app/HelperFiles/BusinessDataHandler.ts"],"names":["firestore","isBusinessInfo","isProductList","BusinessDataHandler","isValid","businessData","info","productList","constructor","TypeError","create","businessID","businessDocSnap","id","docReference","ref","docSnapshot","getProductRefList","getBusinessInfo","doc","getBusinessSnapshot","get","catch","e","snap","exists","Error","productListReference","productRefList","snapData","data","reducedData","businessInfo","getBusinessProductList","Promise","all","map","refCategory","productCategory","products","productRef","then","productSnap","productData","productCat","category"],"mappings":"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","sourcesContent":["import { firestore, ProductData, PublicBusinessData, ProductCategory, ProductRefCategory, isBusinessInfo, isProductList, PrivateBusinessData } from \"./Constants\";\n\nexport default class BusinessDataHandler {\n\n    constructor() {\n        // Prevent an instance from being created\n        if (this.constructor === BusinessDataHandler) {\n            throw new TypeError('Abstract class \"BusinessDataHandler\" cannot be instantiated directly.'); \n        }\n    }\n\n    static create = (businessID: string, businessDocSnap?: firebase.default.firestore.DocumentSnapshot) => {\n        if (businessDocSnap) {\n            let businessData: PrivateBusinessData = {\n                businessID: businessDocSnap.id,\n                docReference: businessDocSnap.ref,\n                docSnapshot: businessDocSnap,\n            }\n            BusinessDataHandler.getProductRefList(businessData);\n            BusinessDataHandler.getBusinessInfo(businessData);\n            return businessData;\n        } else {\n            let businessData: PrivateBusinessData = {\n                businessID: businessID,\n                docReference: firestore.doc(\"/publicBusinessData/\" + businessID),\n            }\n            return businessData;\n        }\n    }\n\n    // Get this business' document snapshot\n    static getBusinessSnapshot = async (businessData: PrivateBusinessData) => {\n        if (!businessData.docSnapshot) {\n            // Get snapshot\n            const snap = await businessData.docReference.get().catch((e) => {throw e});\n            // Check if the document exists\n            if (!snap.exists) {\n                throw new Error(\"No document exists for business ID: \" + businessData.businessID);\n            } else {\n                businessData.docSnapshot = snap;\n            }\n        }\n      }\n    // Get the product list that contains references\n    static getProductRefList = async (businessData: PrivateBusinessData) => {\n        if (!businessData.productListReference) {\n            // Add the doc snapshot to the PrivateBusinessData object\n            await BusinessDataHandler.getBusinessSnapshot(businessData).catch((e) => {throw e});\n            // Get the reference product list\n            const productRefList = businessData.docSnapshot!.get(\"productList\") as ProductRefCategory[];\n            // Check if the document exists\n            if (!productRefList) {\n                throw new Error(\"Could not retrieve a product list from business ID: \" + businessData.businessID);\n            } else {\n                businessData.productListReference = productRefList;\n            }\n        }\n    }\n    // Get only the PublicBusinessData for a business ID\n    static getBusinessInfo = async (businessData: PrivateBusinessData) => {\n        if (!businessData.info) {\n            // Get this business' document snapshot\n            await BusinessDataHandler.getBusinessSnapshot(businessData).catch((e) => {throw e});\n            // Get business data\n            const snapData = businessData.docSnapshot!.data() as firebase.default.firestore.DocumentData;\n            if (snapData && \"productList\" in snapData) {\n                // Check if this has a reference for its products yet\n                if (!businessData.productListReference) {\n                    businessData.productListReference = snapData.productList as ProductRefCategory[]\n                }\n                // Using object resting, get rid of productList from data retrieved from server, in order to cast as PublicBusinessData\n                const { productList, ...reducedData } = snapData;\n                const businessInfo = reducedData as PublicBusinessData;\n                // Check if reducedData was successfully cast as PublicBusinessData object\n                if (businessInfo) {\n                    businessData.info = businessInfo;\n                } else {\n                    throw new TypeError(\"Could not convert server business data to PublicBusinessData object\")\n                }\n            } else {\n            throw new Error(\"No document or field productList exists for business ID: \" + businessData.businessID);\n            }\n        }\n      }\n      // Get a business's product list\n      static getBusinessProductList = async (businessData: PrivateBusinessData) => {\n        if (!businessData.productList) {\n            await BusinessDataHandler.getProductRefList(businessData).catch((e) => {throw e});\n            // Iterate through each product category, and wait for all promises in nested loop to finish\n            const productList = await Promise.all(businessData.productListReference!.map((refCategory: ProductRefCategory) => {\n                // Convert list of product references to list of ProductData objects\n                const productCategory = Promise.all(refCategory.products.map((productRef: firebase.default.firestore.DocumentReference) => {\n                    // Get a ProductData object\n                    return productRef.get().then((productSnap) => {\n                        // Convert product snapshot to ProductData object\n                        const productData = productSnap.data() as ProductData;\n                        if (!productData) {\n                            throw new Error(\"Could not retrieve a product from business ID: \" + businessData.businessID);\n                        }\n                        return productData;\n                    }, (e) => {throw e});\n                })).then((products: ProductData[]) => {\n                    // After converting all references, return a ProductCategory object\n                    const productCat: ProductCategory = {\n                        category: refCategory.category,\n                        products: products\n                    }\n                    return productCat;\n                }, (e) => {throw e});\n                return productCategory;\n            }))\n            businessData.productList = productList;\n        }\n      }\n\n      isValid = (businessData: PrivateBusinessData) => isBusinessInfo(businessData.info) && isProductList(businessData.productList);\n}"]},"metadata":{},"sourceType":"module"}